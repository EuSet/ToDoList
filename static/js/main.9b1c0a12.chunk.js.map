{"version":3,"sources":["Components/AddItemForm.tsx","Components/EditableSpan.tsx","Components/ToDoList.tsx","App.tsx","index.tsx"],"names":["AddItemForm","props","addItem","inputValue","addNewItem","trim","setError","setInputValue","useState","error","TextField","variant","label","onChange","e","target","value","onBlur","onKeyPress","key","IconButton","color","onClick","AddBox","className","EditableSpan","editMode","setEditMode","title","setTitle","currentTarget","autoFocus","changeTitle","type","onDoubleClick","ToDoList","mapTasksElements","tasks","map","t","style","checked","opacity","id","Checkbox","getChangeCheckedTask","changeTaskTitle","task","removeTask","Delete","changeToDoListItem","removeToDo","addNewTask","listStyle","Button","size","todoListFilter","changeToDoListFilter","ToDoListId1","v1","ToDoListId2","App","filter","toDoLists","setToDOLists","setTasks","toDoListId","newTask","updateTasks","toDoListFilter","toDoList","newTitle","newFilterValue","changeChecked","find","gridStyle","padding","toDoListComponent","tl","Grid","item","Paper","elevation","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","container","newToDoListId","spacing","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9b1c0a12.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from 'react';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype PropsType = {\r\n    addNewItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = (props: PropsType) => {\r\n    const addItem = () => {\r\n        if (inputValue) {\r\n            props.addNewItem(inputValue.trim())\r\n        } else {\r\n            setError('Error, filed is required')\r\n        }\r\n        setInputValue('')\r\n    }\r\n    const changeInputValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(e.target.value)\r\n        setError('')\r\n    }\r\n    const [inputValue, setInputValue] = useState('')\r\n    const [error, setError] = useState('')\r\n    return <div>\r\n        <TextField variant={'outlined'} label={'Title'} error={!!error}\r\n                   onChange={changeInputValue}\r\n                   onBlur={() => {setError('')}}\r\n                   onKeyPress={(e) => {\r\n                       if (e.key === 'Enter') {\r\n                           addItem()\r\n                       }\r\n                   }}\r\n                   value={inputValue}/>\r\n        <IconButton color={'primary'} onClick={addItem}><AddBox/></IconButton>\r\n        <div>\r\n            <span className={'error'}>{error}</span>\r\n        </div>\r\n\r\n    </div>\r\n}","import React, {useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype PropsType = {\r\n    title:string\r\n    changeTitle: (title:string) => void\r\n}\r\nexport const EditableSpan = (props:PropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    return editMode ? <TextField variant={'standard'} color={'primary'} value={title} onChange={(e) => {setTitle(e.currentTarget.value)}} autoFocus onBlur={offEditMode} type=\"text\"/> : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n}\r\n","import React from \"react\";\r\nimport {FiltersValueType} from \"../App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype ToDoListType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, toDoListId: string) => void\r\n    changeToDoListFilter: (newFilterValue: FiltersValueType, toDoListId: string) => void\r\n    getChangeCheckedTask: (id: string, toDoListId: string) => void\r\n    addNewTask: (title: string, toDoListId: string) => void\r\n    todoListFilter: FiltersValueType\r\n    removeToDo: (toDoListId: string) => void\r\n    changeTaskTitle: (title: string, id: string, toDoListId: string) => void\r\n    changeToDoListItem: (title: string, toDoListId: string) => void\r\n}\r\nexport type TaskType = {\r\n    id: string\r\n    checked: boolean\r\n    task: string\r\n}\r\n\r\nexport function ToDoList(props: ToDoListType) {\r\n    const mapTasksElements = props.tasks.map(t => {\r\n        const changeTitle = (title: string) => {\r\n            props.changeTaskTitle(title, t.id, props.id)\r\n        }\r\n        return <li style={t.checked ? {opacity: '0.5'} : {}} key={t.id}><Checkbox color={'primary'} onClick={() => {\r\n            props.getChangeCheckedTask(t.id, props.id)\r\n        }} checked={t.checked}/>\r\n            <EditableSpan changeTitle={changeTitle} title={t.task}/>\r\n            <IconButton onClick={() => {\r\n                props.removeTask(t.id, props.id)\r\n            }}><Delete/>\r\n            </IconButton>\r\n        </li>\r\n    })\r\n    const addNewItemTask = (title: string) => {\r\n        props.addNewTask(title, props.id)\r\n\r\n    }\r\n    const addNewToDoTitle = (title: string) => {\r\n        props.changeToDoListItem(title, props.id)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan changeTitle={addNewToDoTitle} title={props.title}/> <IconButton onClick={() => {\r\n            props.removeToDo(props.id)\r\n        }}><Delete/></IconButton></h3>\r\n        <AddItemForm addNewItem={addNewItemTask}/>\r\n        <ul style={{listStyle: 'none'}}>\r\n            {mapTasksElements}\r\n        </ul>\r\n        <div>\r\n            <Button size={'small'} color={\"primary\"} variant={props.todoListFilter === 'all' ? 'outlined' : 'contained'}\r\n                    onClick={() => {\r\n                        props.changeToDoListFilter('all', props.id)\r\n                    }}>All\r\n            </Button>\r\n            <Button size={'small'} color={\"primary\"}\r\n                    variant={props.todoListFilter === 'active' ? 'outlined' : 'contained'} onClick={() => {\r\n                props.changeToDoListFilter('active', props.id)\r\n            }}>Active\r\n            </Button>\r\n            <Button size={'small'} color={\"primary\"}\r\n                    variant={props.todoListFilter === 'completed' ? 'outlined' : 'contained'} onClick={() => {\r\n                props.changeToDoListFilter('completed', props.id)\r\n            }}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, ToDoList} from \"./Components/ToDoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./Components/AddItemForm\";\r\nimport {AppBar, Container, Grid, Paper, Toolbar} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\n\r\nexport type FiltersValueType = \"all\" | \"active\" | \"completed\"\r\nexport type ToDOListType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FiltersValueType\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nconst ToDoListId1 = v1()\r\nconst ToDoListId2 = v1()\r\n\r\nfunction App() {\r\n\r\n    const [toDoLists, setToDOLists] = useState<Array<ToDOListType>>([\r\n        {id: ToDoListId1, title: 'What to learn', filter: 'all'},\r\n        {id: ToDoListId2, title: 'What to buy', filter: 'all'}\r\n    ])\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [ToDoListId1]: [\r\n            {id: v1(), checked: true, task: 'HTML'},\r\n            {id: v1(), checked: true, task: 'CSS'},\r\n            {id: v1(), checked: false, task: 'React'},\r\n        ],\r\n        [ToDoListId2]: [\r\n            {id: v1(), checked: true, task: 'Beer'},\r\n            {id: v1(), checked: true, task: 'Fish'},\r\n            {id: v1(), checked: false, task: 'Tasks'}\r\n        ]\r\n    })\r\n\r\n\r\n\r\n    // function getTusksForToDoList() {\r\n    //     switch (todoListFilter) {\r\n    //         case \"active\":\r\n    //             return tasks.filter(t => !t.checked)\r\n    //         case \"completed\":\r\n    //             return tasks.filter(t => t.checked)\r\n    //         default:\r\n    //             return tasks\r\n    //     }\r\n\r\n    // }\r\n\r\n    function removeTask(id: string, toDoListId: string) {\r\n        tasks[toDoListId] = tasks[toDoListId].filter(t => {\r\n            return t.id !== id\r\n        })\r\n        setTasks({...tasks})\r\n    }\r\n    function getChangeCheckedTask(id: string, toDoListId: string) {\r\n        tasks[toDoListId] = tasks[toDoListId].map(t => {\r\n            if (t.id === id) {\r\n                // t.checked = !t.checked\r\n                return {...t, checked: !t.checked}\r\n            }\r\n            return t\r\n        })\r\n        setTasks({...tasks})\r\n    }\r\n    function addNewTask(title: string, toDoListId: string) {\r\n        const newTask: TaskType = {id: v1(), checked: false, task: title}\r\n        tasks[toDoListId] = [newTask, ...tasks[toDoListId]]\r\n        setTasks({...tasks})\r\n    }\r\n    const changeTaskTitle = (title: string, id: string, toDoListId: string) => {\r\n        const updateTasks = tasks[toDoListId].map(t => {\r\n            if (t.id === id) {\r\n                t.task = title\r\n                return {...t, task: title}\r\n            }\r\n            return t\r\n        })\r\n        setTasks({...tasks, updateTasks})\r\n\r\n    }\r\n    function toDoListFilter(toDoList: ToDOListType) {\r\n        switch (toDoList.filter) {\r\n            case \"completed\":\r\n                return tasks[toDoList.id].filter(t => t.checked)\r\n            case \"active\":\r\n                return tasks[toDoList.id].filter(t => !t.checked)\r\n            default:\r\n                return tasks[toDoList.id]\r\n        }\r\n    }\r\n\r\n    function removeToDo(toDoListId: string) {\r\n        // toDoLists.filter(t => t.id != toDoListId)\r\n        setToDOLists(toDoLists.filter(t => t.id !== toDoListId))\r\n        delete tasks[toDoListId]\r\n    }\r\n    const AddToDoList = (title: string) => {\r\n        const newToDoListId = v1()\r\n        const newToDoList: ToDOListType = {\r\n            id: newToDoListId, title, filter: 'all'\r\n        }\r\n        setToDOLists([newToDoList, ...toDoLists])\r\n        setTasks({...tasks, [newToDoListId]: []})\r\n    }\r\n    const changeToDoListItem = (title: string, toDoListId: string) => {\r\n        const newTitle = toDoLists.map(t => t.id === toDoListId ? {...t, title: title} : t)\r\n        setToDOLists(newTitle)\r\n    }\r\n    function changeToDoListFilter(newFilterValue: FiltersValueType, toDoListId: string) {\r\n        // setToDOLists(toDoLists.map(tl => tl.id === toDoListId ? {...tl, filter: newFilterValue}:tl))\r\n        const changeChecked = toDoLists.find(t => t.id === toDoListId)\r\n        if (changeChecked) {\r\n            changeChecked.filter = newFilterValue\r\n        }\r\n        setToDOLists([...toDoLists])\r\n    }\r\n\r\n    const gridStyle = {padding:'20px'}\r\n\r\n    const toDoListComponent = toDoLists.map(tl => {\r\n        return <Grid item key={tl.id}> <Paper elevation={7} style={gridStyle}><ToDoList\r\n            id={tl.id}\r\n            title={tl.title}\r\n            tasks={toDoListFilter(tl)}\r\n            removeTask={removeTask}\r\n            changeToDoListFilter={changeToDoListFilter}\r\n            getChangeCheckedTask={getChangeCheckedTask}\r\n            addNewTask={addNewTask}\r\n            todoListFilter={tl.filter}\r\n            removeToDo={removeToDo}\r\n            changeTaskTitle={changeTaskTitle}\r\n            changeToDoListItem={changeToDoListItem}\r\n        />\r\n        </Paper>\r\n        </Grid>\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent:'space-between'}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        ToDoLists\r\n                    </Typography>\r\n                        <Button variant={'outlined'} color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={gridStyle}>\r\n            <AddItemForm addNewItem={AddToDoList}/>\r\n                </Grid>\r\n                <Grid container spacing={5}>\r\n                {toDoListComponent}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n\r\n\r\n"],"sourceRoot":""}