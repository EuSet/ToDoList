{"version":3,"sources":["Components/ToDoList.tsx","App.tsx","index.tsx"],"names":["ToDoList","props","addTask","inputValue","addNewTask","trim","id","setError","setInputValue","useState","error","mapTasksElements","tasks","map","t","key","onClick","getChangeCheckedTask","type","checked","task","removeTask","allBtnClass","todoListFilter","activeBtnClass","completedBtnClass","title","removeToDo","className","onChange","e","target","value","changeInputValue","onKeyPress","changeToDoListFilter","ToDoListId1","v1","ToDoListId2","App","filter","toDoLists","setToDOLists","setTasks","newFilterValue","toDoListId","changeChecked","find","newTask","toDoListFilter","toDoList","tl","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ca9b9100.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from \"react\";\r\nimport {FiltersValueType, ToDOListType} from \"../App\";\r\n\r\ntype ToDoListType = {\r\n    id:string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, toDoListId:string) => void\r\n    changeToDoListFilter: (newFilterValue: FiltersValueType, toDoListId:string) => void\r\n    getChangeCheckedTask:(id: string,toDoListId:string) => void\r\n    addNewTask:(title:string, toDoListId:string) => void\r\n    todoListFilter:FiltersValueType\r\n    removeToDo:(toDoListId:string) => void\r\n}\r\nexport type TaskType = {\r\n    id: string\r\n    checked: boolean\r\n    task: string\r\n}\r\n\r\nexport function ToDoList(props: ToDoListType) {\r\n    const addTask = () => {if(inputValue){\r\n        props.addNewTask(inputValue.trim(),props.id)\r\n    } else {\r\n        setError('Error, filed is required')\r\n    }\r\n        setInputValue('')}\r\n        const changeInputValue = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(e.target.value)\r\n            setError('')\r\n    }\r\n    const [inputValue, setInputValue] = useState('')\r\n    const [error, setError] = useState('')\r\n    const mapTasksElements = props.tasks.map(t => {\r\n        return <li key={t.id}><input onClick={() => {props.getChangeCheckedTask(t.id, props.id)}} type=\"checkbox\" checked={t.checked}/> <span>{t.task}</span>\r\n            <button onClick={() => {\r\n                props.removeTask(t.id, props.id)\r\n            }}>del\r\n            </button>\r\n        </li>\r\n    })\r\n    const allBtnClass = props.todoListFilter === 'all'? 'active-filter': ''\r\n    const activeBtnClass = props.todoListFilter === 'active'? 'active-filter': ''\r\n    const completedBtnClass = props.todoListFilter === 'completed'? 'active-filter': ''\r\n\r\n    return <div>\r\n        <h3>{props.title} <button onClick={() => {props.removeToDo(props.id)}}>del</button></h3>\r\n        <div>\r\n            <input className={error ? 'errorInput' : '' } onChange={(e) => changeInputValue(e)}\r\n                   onKeyPress={(e) => {if(e.key === 'Enter'){addTask()}}}\r\n                   value={inputValue}/>\r\n            <button onClick={addTask}>+</button>\r\n            <div>\r\n                <span className={'error'}>{error}</span>\r\n            </div>\r\n\r\n        </div>\r\n        <ul>\r\n            {mapTasksElements}\r\n        </ul>\r\n        <div>\r\n            <button className={allBtnClass} onClick={() => {\r\n                props.changeToDoListFilter('all', props.id)\r\n            }}>All\r\n            </button>\r\n            <button className={activeBtnClass} onClick={() => {\r\n                props.changeToDoListFilter('active', props.id)\r\n            }}>Active\r\n            </button>\r\n            <button className={completedBtnClass} onClick={() => {\r\n                props.changeToDoListFilter('completed', props.id)\r\n            }}>Completed\r\n            </button>\r\n        </div>\r\n    </div>\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, ToDoList} from \"./Components/ToDoList\";\r\nimport {v1} from \"uuid\";\r\n\r\n\r\nexport type FiltersValueType = \"all\" | \"active\" | \"completed\"\r\nexport type ToDOListType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FiltersValueType\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nconst ToDoListId1 = v1()\r\nconst ToDoListId2 = v1()\r\n\r\nfunction App() {\r\n\r\n    const [toDoLists, setToDOLists] = useState<Array<ToDOListType>>([\r\n        {id: ToDoListId1, title: 'What to learn', filter: 'all'},\r\n        {id: ToDoListId2, title: 'What to buy', filter: 'all'}\r\n    ])\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [ToDoListId1]: [\r\n            {id: v1(), checked: true, task: 'HTML'},\r\n            {id: v1(), checked: true, task: 'CSS'},\r\n            {id: v1(), checked: false, task: 'React'},\r\n        ],\r\n        [ToDoListId2]: [\r\n            {id: v1(), checked: true, task: 'Beer'},\r\n            {id: v1(), checked: true, task: 'Fish'},\r\n            {id: v1(), checked: false, task: 'Tasks'}\r\n        ]\r\n    })\r\n\r\n    function changeToDoListFilter(newFilterValue: FiltersValueType, toDoListId: string   ) {\r\n        // setToDOLists(toDoLists.map(tl => tl.id === toDoListId ? {...tl, filter: newFilterValue}:tl))\r\n        const changeChecked = toDoLists.find(t => t.id === toDoListId)\r\n        if(changeChecked){\r\n            changeChecked.filter = newFilterValue\r\n        }\r\n        setToDOLists([...toDoLists])\r\n    }\r\n\r\n    // function getTusksForToDoList() {\r\n    //     switch (todoListFilter) {\r\n    //         case \"active\":\r\n    //             return tasks.filter(t => !t.checked)\r\n    //         case \"completed\":\r\n    //             return tasks.filter(t => t.checked)\r\n    //         default:\r\n    //             return tasks\r\n    //     }\r\n\r\n    // }\r\n\r\n    function removeTask(id: string, toDoListId: string) {\r\n        tasks[toDoListId] = tasks[toDoListId].filter(t => {\r\n            return t.id !== id\r\n        })\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function getChangeCheckedTask(id: string, toDoListId: string) {\r\n        tasks[toDoListId] = tasks[toDoListId].map(t => {\r\n            if (t.id === id) {\r\n                // t.checked = !t.checked\r\n                return {...t, checked: !t.checked}\r\n            }\r\n            return t\r\n        })\r\n        setTasks({...tasks})\r\n    }\r\n    function removeToDo(toDoListId: string){\r\n        // toDoLists.filter(t => t.id != toDoListId)\r\n        setToDOLists(toDoLists.filter(t => t.id !== toDoListId))\r\n        delete tasks[toDoListId]\r\n    }\r\n\r\n    function addNewTask(title: string, toDoListId: string) {\r\n        const newTask: TaskType = {id: v1(), checked: false, task: title}\r\n        tasks[toDoListId] = [newTask, ...tasks[toDoListId]]\r\n        setTasks({...tasks})\r\n    }\r\n    function toDoListFilter(toDoList:ToDOListType) {\r\n        switch (toDoList.filter) {\r\n            case \"completed\":\r\n                return tasks[toDoList.id].filter(t => t.checked)\r\n            case \"active\":\r\n                return tasks[toDoList.id].filter(t => !t.checked)\r\n            default:\r\n                return tasks[toDoList.id]\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {\r\n                toDoLists.map(tl => {\r\n                    // let filteredToDOList = tasks[tl.id]\r\n                    // if (tl.filter === 'active') {\r\n                    //     filteredToDOList = tasks[tl.id].filter(t => !t.checked)\r\n                    // }\r\n                    // if (tl.filter === 'completed') {\r\n                    //     filteredToDOList = tasks[tl.id].filter(t => t.checked)\r\n                    // }\r\n                    return <ToDoList\r\n                        id={tl.id}\r\n                        key={tl.id}\r\n                        title={tl.title}\r\n                        tasks={toDoListFilter(tl)}\r\n                        removeTask={removeTask}\r\n                        changeToDoListFilter={changeToDoListFilter}\r\n                        getChangeCheckedTask={getChangeCheckedTask}\r\n                        addNewTask={addNewTask}\r\n                        todoListFilter={tl.filter}\r\n                        removeToDo={removeToDo}\r\n                    />\r\n                })\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n\r\n\r\n"],"sourceRoot":""}