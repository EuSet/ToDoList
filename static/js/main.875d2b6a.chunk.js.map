{"version":3,"sources":["Components/AddItemForm.tsx","Components/EditableSpan.tsx","Components/Task.tsx","Components/ToDoList.tsx","state/toDoLists-reducer.ts","state/tasks-reducer.ts","App.tsx","state/store.ts","index.tsx"],"names":["AddItemForm","React","memo","props","addItem","inputValue","addNewItem","trim","setError","setInputValue","useState","error","TextField","variant","label","onChange","e","target","value","onBlur","onKeyPress","key","IconButton","color","onClick","className","EditableSpan","console","log","editMode","setEditMode","title","setTitle","currentTarget","autoFocus","changeTitle","type","onDoubleClick","Task","t","id","onChangeTaskTitle","useCallback","newTitle","style","checked","opacity","Checkbox","getChangeCheckedTask","task","removeTask","ToDoList","addNewTask","changeToDoListFilter","changeTaskTitle","mapTasksElements","todoListFilter","tasks","filter","toDoListFilter","map","addNewItemTask","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","changeToDoListItem","removeToDo","listStyle","ButtonGroup","size","Button","initialState","App","toDoLists","useSelector","state","dispatch","useDispatch","removedTask","toDoListId","getChangedCheckedTask","addedNewTask","changedTaskTitle","removeToDoList","AddedToDoList","newToDoLisId","v1","addToDoList","changedToDoListItem","changedToDoListFilter","newFilterValue","gridStyle","padding","toDoListComponent","tl","Grid","item","Paper","elevation","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","container","spacing","rootReducer","combineReducers","action","newToDoList","newTask","updateChecked","updateTasks","store","createStore","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.875d2b6a.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from 'react';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport PlusOneIcon from '@material-ui/icons/PlusOne';\r\n\r\ntype PropsType = {\r\n    addNewItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo( (props: PropsType) => {\r\n    // console.log('AddItemForm')\r\n    const addItem = () => {\r\n        if (inputValue) {\r\n            props.addNewItem(inputValue.trim())\r\n        } else {\r\n            setError('Error, filed is required')\r\n        }\r\n        setInputValue('')\r\n    }\r\n    const changeInputValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(e.target.value)\r\n        if(error){\r\n            setError('')\r\n        }\r\n    }\r\n    const [inputValue, setInputValue] = useState('')\r\n    const [error, setError] = useState('')\r\n    return <div>\r\n        <TextField variant={'standard'} label={'Title'} error={!!error}\r\n                   onChange={changeInputValue}\r\n                   onBlur={() => {setError('')}}\r\n                   onKeyPress={(e) => {\r\n                       if (e.key === 'Enter') {\r\n                           addItem()\r\n                       }\r\n                   }}\r\n                   value={inputValue}/>\r\n        <IconButton color={'primary'} onClick={addItem}><PlusOneIcon color={\"primary\"}/></IconButton>\r\n        <div>\r\n            <span className={'error'}>{error}</span>\r\n        </div>\r\n\r\n    </div>\r\n})\r\n","import React, {useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype PropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\nexport const EditableSpan = React.memo((props: PropsType) => {\r\n    console.log('EditableSpan')\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    return editMode ?\r\n        <TextField variant={'standard'} color={'primary'}\r\n                   value={title} onChange={(e) => {\r\n            setTitle(e.currentTarget.value)\r\n        }}\r\n                   autoFocus onBlur={offEditMode} type=\"text\"/> :\r\n        <span onDoubleClick={onEditMode}>{props.title}</span>\r\n})\r\n","import React, {useCallback} from \"react\";\r\nimport {Checkbox} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport HighlightOffTwoToneIcon from \"@material-ui/icons/HighlightOffTwoTone\";\r\nimport {TaskType} from \"./ToDoList\";\r\n\r\ntype PropsType = {\r\n    t:TaskType\r\n    getChangeCheckedTask:(id: string, toDoListId: string) => void\r\n    changeTitle: (title: string, id: string, toDoListId: string) => void\r\n    removeTask: (id: string, toDoListId: string) => void\r\n    id:string\r\n}\r\nexport const Task = React.memo(({t, id, changeTitle, ...props}:PropsType) => {\r\n    const onChangeTaskTitle = useCallback((newTitle:string) => {\r\n        changeTitle(newTitle, id, t.id)\r\n    },[id, changeTitle, t.id])\r\n    return <div style={t.checked ? {opacity: '0.5'} : {}} key={t.id}><Checkbox color={'primary'} onClick={() => {\r\n        props.getChangeCheckedTask(t.id, id)\r\n    }} checked={t.checked}/>\r\n        <EditableSpan changeTitle={onChangeTaskTitle} title={t.task}/>\r\n        <IconButton onClick={() => {\r\n            props.removeTask(t.id, id)\r\n        }}><HighlightOffTwoToneIcon color={\"primary\"}/>\r\n        </IconButton>\r\n    </div>\r\n\r\n})\r\n","import React, {useCallback} from \"react\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, ButtonGroup} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteSweepTwoToneIcon from \"@material-ui/icons/DeleteSweepTwoTone\";\r\nimport {FiltersValueType} from \"../App\";\r\nimport {Task} from \"./Task\";\r\n\r\ntype ToDoListType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, toDoListId: string) => void\r\n    changeToDoListFilter: (newFilterValue: FiltersValueType, toDoListId: string) => void\r\n    getChangeCheckedTask: (id: string, toDoListId: string) => void\r\n    addNewTask: (title: string, toDoListId: string) => void\r\n    todoListFilter: FiltersValueType\r\n    removeToDo: (toDoListId: string) => void\r\n    changeTaskTitle: (title: string, id: string, toDoListId: string) => void\r\n    changeToDoListItem: (title: string, toDoListId: string) => void\r\n}\r\nexport type TaskType = {\r\n    id: string\r\n    checked: boolean\r\n    task: string\r\n}\r\n\r\nexport const ToDoList = React.memo( (\r\n    {id, addNewTask, changeToDoListFilter, changeTaskTitle, ...props}: ToDoListType) => {\r\n    console.log('todolist called')\r\n    const toDoListFilter = ():TaskType[] => {\r\n        switch (props.todoListFilter) {\r\n            case \"completed\":\r\n                return props.tasks.filter(t => t.checked)\r\n            case \"active\":\r\n                return props.tasks.filter(t => !t.checked)\r\n            default:\r\n                return props.tasks\r\n        }\r\n    }\r\n    const tasksAfterFilter = toDoListFilter()\r\n    const mapTasksElements = tasksAfterFilter.map(t => {\r\n        return <Task t={t}\r\n                     getChangeCheckedTask={props.getChangeCheckedTask}\r\n                     changeTitle={changeTaskTitle}\r\n                     removeTask={props.removeTask}\r\n                     id={id}\r\n                     key={t.id}\r\n        />\r\n    })\r\n    const addNewItemTask = useCallback((title: string) => {\r\n        addNewTask(title, id)\r\n    },[id, addNewTask])\r\n\r\n    const addNewToDoTitle = (title: string) => {\r\n        props.changeToDoListItem(title, id)\r\n    }\r\n\r\n    const onAllClickHandler = useCallback(() =>\r\n        changeToDoListFilter('all', id),[changeToDoListFilter, id])\r\n    const onActiveClickHandler = useCallback(() =>\r\n        changeToDoListFilter('active', id),[changeToDoListFilter, id])\r\n    const onCompletedClickHandler = useCallback(() =>\r\n        changeToDoListFilter('completed', id),[changeToDoListFilter, id])\r\n\r\n    return <div>\r\n        <h3><EditableSpan changeTitle={addNewToDoTitle} title={props.title}/> <IconButton onClick={() => {\r\n            props.removeToDo(id)\r\n        }}><DeleteSweepTwoToneIcon color={\"primary\"}/></IconButton></h3>\r\n        <AddItemForm addNewItem={addNewItemTask}/>\r\n        <ul style={{listStyle: 'none'}}>\r\n            {mapTasksElements}\r\n        </ul>\r\n        <div>\r\n            <ButtonGroup size={\"small\"} color={\"primary\"}>\r\n            <Button size={'small'} color={\"primary\"} variant={props.todoListFilter === 'all' ? 'contained' : 'outlined'}\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button size={'small'} color={\"primary\"}\r\n                    variant={props.todoListFilter === 'active' ? 'contained' : 'outlined'}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button size={'small'} color={\"primary\"}\r\n                    variant={props.todoListFilter === 'completed' ? 'contained' : 'outlined'}\r\n                    onClick={onCompletedClickHandler}\r\n            >Completed\r\n            </Button>\r\n            </ButtonGroup>\r\n        </div>\r\n    </div>\r\n})\r\n","import {FiltersValueType, ToDOListType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\ntype ActionsType =\r\n    ReturnType<typeof removeToDoList> |\r\n    ReturnType<typeof addToDoList> |\r\n    ReturnType<typeof changeToDoListItem> |\r\n    ReturnType<typeof changeToDoListFilter>\r\n\r\n\r\nconst initialState:Array<ToDOListType> = []\r\nexport const toDoListsReducer = (toDoLists: Array<ToDOListType> = initialState, action:ActionsType ): Array<ToDOListType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE_TO_DO_LIST\":\r\n            return toDoLists.filter(t => t.id !== action.toDoListId)\r\n        case \"ADD_TO_DO_LIST\":\r\n            const newToDoList: ToDOListType = {\r\n                id: action.newToDoLisId, title: action.title, filter: 'all'}\r\n            return [newToDoList, ...toDoLists]\r\n        case \"CHANGE_TO_DO_LIST_ITEM\":\r\n            return toDoLists.map(t => t.id === action.toDoListId ?\r\n                {...t, title: action.title} : t)\r\n        case \"CHANGE_TO_DO_LIST_FILTER\":\r\n            return toDoLists.map(tl => tl.id === action.toDoListId ?\r\n                {...tl, filter: action.newFilterValue} : tl)\r\n        default:\r\n            return toDoLists\r\n    }\r\n}\r\n\r\nexport const removeToDoList = (toDoListId: string) => {\r\n    return {type: 'REMOVE_TO_DO_LIST', toDoListId} as const\r\n}\r\nexport const addToDoList = (title: string) => {\r\n    return {type: 'ADD_TO_DO_LIST', title, newToDoLisId:v1()} as const\r\n}\r\nexport const changeToDoListItem = (title: string, toDoListId: string) => {\r\n    return {type: 'CHANGE_TO_DO_LIST_ITEM', title, toDoListId} as const\r\n}\r\nexport const changeToDoListFilter = (newFilterValue: FiltersValueType, toDoListId: string) => {\r\n    return {type: 'CHANGE_TO_DO_LIST_FILTER', newFilterValue, toDoListId} as const\r\n}","import {TaskType} from \"../Components/ToDoList\";\r\nimport {v1} from \"uuid\";\r\nimport {addToDoList, removeToDoList} from \"./toDoLists-reducer\";\r\nimport {TaskStateType} from \"../App\";\r\n\r\ntype ActionsType = ReturnType<typeof removeTask> |\r\n    ReturnType<typeof addNewTask> |\r\n    ReturnType<typeof getChangeCheckedTask> |\r\n    ReturnType<typeof changeTaskTitle> |\r\n    ReturnType<typeof removeToDoList> |\r\n    ReturnType<typeof addToDoList>\r\n\r\nconst initialState: TaskStateType ={}\r\n\r\nexport const tasksReducer = (state:TaskStateType = initialState, action:ActionsType ): TaskStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE_TASK\":\r\n            state[action.toDoListId] = state[action.toDoListId].filter(t => t.id !== action.id)\r\n            return {\r\n                ...state\r\n            }\r\n        case \"ADD_NEW_TASK\":\r\n            const newTask: TaskType = {id: v1(), checked: false, task: action.title}\r\n            return {\r\n                ...state, [action.toDoListId]: [newTask, ...state[action.toDoListId]]\r\n            }\r\n        case \"CHANGE_CHECKED_TASK\":\r\n           const updateChecked = state[action.toDoListId].map(t => {\r\n                if (t.id === action.id) {\r\n                    // t.checked = !t.checked\r\n                    return {...t, checked: !t.checked}\r\n                }\r\n                return t\r\n            })\r\n            return {\r\n                ...state, [action.toDoListId]:updateChecked\r\n            }\r\n        case \"CHANGE_TO_DO_LIST_FILTER\":\r\n            const updateTasks = state[action.toDoListId].map(t => {\r\n                if (t.id === action.id) {\r\n                    t.task = action.title\r\n                    return {...t, task: action.title}\r\n                }\r\n                return t\r\n            })\r\n            return {\r\n                ...state,updateTasks\r\n            }\r\n        case \"REMOVE_TO_DO_LIST\":\r\n            delete state[action.toDoListId]\r\n            return {\r\n                ...state\r\n            }\r\n        case \"ADD_TO_DO_LIST\":\r\n            return {\r\n                ...state, [action.newToDoLisId]: []\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTask = (id: string, toDoListId: string) => {\r\n    return {type: 'REMOVE_TASK', toDoListId, id} as const\r\n}\r\nexport const addNewTask = (title: string, toDoListId: string) => {\r\n    return {type: 'ADD_NEW_TASK', title, toDoListId} as const\r\n}\r\nexport const getChangeCheckedTask = (id: string, toDoListId: string) => {\r\n    return {type: 'CHANGE_CHECKED_TASK', id, toDoListId} as const\r\n}\r\nexport const changeTaskTitle = (title: string, id: string, toDoListId: string) => {\r\n    return {type: 'CHANGE_TO_DO_LIST_FILTER', title, id, toDoListId} as const\r\n}","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {TaskType, ToDoList} from \"./Components/ToDoList\";\r\nimport {AddItemForm} from \"./Components/AddItemForm\";\r\nimport {AppBar, Container, Grid, Paper, Toolbar} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {addToDoList, changeToDoListFilter, changeToDoListItem, removeToDoList} from \"./state/toDoLists-reducer\";\r\nimport {addNewTask, changeTaskTitle, getChangeCheckedTask, removeTask} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StateType} from \"./state/store\";\r\n\r\n\r\nexport type FiltersValueType = \"all\" | \"active\" | \"completed\"\r\nexport type ToDOListType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FiltersValueType\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    let toDoLists = useSelector<StateType, Array<ToDOListType>>(state => state.toDoLists)\r\n    let tasks = useSelector<StateType, TaskStateType>(state => state.tasks)\r\n    let dispatch = useDispatch()\r\n\r\n    const removedTask = useCallback((id: string, toDoListId: string) => {\r\n        dispatch(removeTask(id, toDoListId))\r\n\r\n    },[dispatch])\r\n    const getChangedCheckedTask = useCallback((id: string, toDoListId: string) => {\r\n        dispatch(getChangeCheckedTask(id, toDoListId))\r\n\r\n    },[dispatch])\r\n    const addedNewTask = useCallback((title: string, toDoListId: string) => {\r\n        dispatch(addNewTask(title, toDoListId))\r\n    },[dispatch])\r\n    const changedTaskTitle = useCallback((title: string, id: string, toDoListId: string) => {\r\n        dispatch(changeTaskTitle(title, id, toDoListId))\r\n\r\n    },[dispatch])\r\n    // const toDoListFilter = useCallback((toDoList: ToDOListType) => {\r\n    //     switch (toDoList.filter) {\r\n    //         case \"completed\":\r\n    //             return tasks[toDoList.id].filter(t => t.checked)\r\n    //         case \"active\":\r\n    //             return tasks[toDoList.id].filter(t => !t.checked)\r\n    //         default:\r\n    //             return tasks[toDoList.id]\r\n    //     }\r\n    // },[tasks])\r\n\r\n    const removeToDo = useCallback((toDoListId: string) => {\r\n        dispatch(removeToDoList(toDoListId))\r\n    },[dispatch])\r\n    const AddedToDoList = useCallback((title: string) => {\r\n        dispatch(addToDoList(title))\r\n    },[dispatch])\r\n    const changedToDoListItem = useCallback((title: string, toDoListId: string) => {\r\n        dispatch(changeToDoListItem(title, toDoListId))\r\n    },[dispatch])\r\n    const changedToDoListFilter = useCallback((newFilterValue: FiltersValueType, toDoListId: string) => {\r\n        dispatch(changeToDoListFilter(newFilterValue, toDoListId))\r\n    },[dispatch])\r\n\r\n    const gridStyle = {padding:'20px'}\r\n\r\n    const toDoListComponent = toDoLists.map(tl => {\r\n        return <Grid item key={tl.id}> <Paper elevation={7} style={gridStyle}><ToDoList\r\n            id={tl.id}\r\n            title={tl.title}\r\n            tasks={tasks[tl.id]}\r\n            removeTask={removedTask}\r\n            changeToDoListFilter={changedToDoListFilter}\r\n            getChangeCheckedTask={getChangedCheckedTask}\r\n            addNewTask={addedNewTask}\r\n            todoListFilter={tl.filter}\r\n            removeToDo={removeToDo}\r\n            changeTaskTitle={changedTaskTitle}\r\n            changeToDoListItem={changedToDoListItem}\r\n        />\r\n        </Paper>\r\n        </Grid>\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent:'space-between'}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        ToDoLists\r\n                    </Typography>\r\n                        <Button variant={'outlined'} color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={gridStyle}>\r\n            <AddItemForm addNewItem={AddedToDoList}/>\r\n                </Grid>\r\n                <Grid container spacing={5}>\r\n                {toDoListComponent}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n","import { createStore, combineReducers } from \"redux\";\r\nimport {toDoListsReducer} from \"./toDoLists-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    toDoLists:toDoListsReducer,\r\n    tasks:tasksReducer\r\n})\r\nexport type StateType = ReturnType<typeof rootReducer>\r\nexport const store = createStore(rootReducer)\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from \"./App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <App/>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n\r\n\r\n"],"sourceRoot":""}