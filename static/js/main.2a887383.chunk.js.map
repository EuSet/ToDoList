{"version":3,"sources":["api/toDoLists-api.tsx","components/AddItemForm.tsx","state/app-reducer.ts","utills/error-utills.ts","state/toDoLists-reducer.ts","state/tasks-reducer.ts","components/EditableSpan.tsx","todolistsList/todolist/task/Task.tsx","todolistsList/todolist/ToDoList.tsx","todolistsList/ToDoListsList.tsx","api/login-api.ts","state/auth-reducer.ts","components/Header.tsx","components/ErrorSnackBar.tsx","login/login.tsx","app/App.tsx","state/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","addItem","inputValue","addNewItem","trim","setError","setInputValue","useState","error","TextField","variant","label","onChange","e","target","value","onBlur","onKeyPress","key","disabled","entityStatus","IconButton","color","onClick","className","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","tasksAPI","todolistId","taskId","model","initialState","status","isInitialized","appSetStatus","type","appSetError","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","removeToDoList","toDoListId","changeToDoListItem","changeTodolistEntityStatus","removeTask","updateTask","setTasks","tasks","changeEntityStatusTask","updateTaskThunk","getState","a","task","find","t","modelTask","res","resultCode","EditableSpan","console","log","editMode","setEditMode","setTitle","currentTarget","autoFocus","changeTitle","onDoubleClick","Task","onChangeTaskTitle","useCallback","newTitle","style","Completed","opacity","Checkbox","getChangeCheckedTask","checked","ToDoList","addNewTask","changeToDoListFilter","changeTaskTitle","useDispatch","useEffect","items","mapTasksElements","todoListFilter","filter","New","toDoListFilter","map","addNewItemTask","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","removeToDo","listStyle","ButtonGroup","size","Button","ToDoListsList","isLoggedIn","useSelector","state","auth","toDoLists","removedTask","removeTaskThunk","getChangedCheckedTask","addedNewTask","item","addNewTaskThunk","changedTaskTitle","removeToDoListThunk","AddedToDoList","toDo","addNewToDoListThunk","changedToDoListItem","changeToDoListTitleThunk","changedToDoListFilter","newFilterValue","gridStyle","padding","to","toDoListComponent","tl","Grid","Paper","elevation","container","spacing","authApi","setIsLoggedInAC","Header","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Alert","ErrorSnackbar","app","handleClose","event","reason","open","Snackbar","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","resetForm","validate","errors","test","justify","xs","handleSubmit","FormControl","FormLabel","href","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","LinearProgress","width","Container","fixed","path","render","exact","from","top","textAlign","CircularProgress","rootReducer","combineReducers","action","newToDoList","newTask","todoListId","updateTasks","stateCopy","forEach","store","createStore","applyMiddleware","thunk","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.2a887383.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'bd25c1b4-72d5-4540-912d-5ef4c71f0544'\r\n    }\r\n}\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    ...settings\r\n})\r\nexport type ToDoListType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport type TaskType = {\r\n    description: string | null\r\n    title: string\r\n    completed: boolean\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskType = {\r\n    title: string\r\n    description: string | null\r\n    completed: boolean\r\n    status: number\r\n    priority: number\r\n    startDate: string | null\r\n    deadline: string | null\r\n}\r\ntype GetTasksType = {\r\n    items:Array<TaskType>\r\n    totalCount:number\r\n    error:string\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getToDolists() {\r\n        return instance.get<Array<ToDoListType>>('/todo-lists')\r\n    },\r\n    createNewToDoList(title: string) {\r\n        return instance.post<ResponseType<{ item: ToDoListType }>>('/todo-lists', {title})\r\n    },\r\n    deleteToDoList(id: string) {\r\n        return instance.delete<ResponseType>(`/todo-lists/${id}`)\r\n    },\r\n    updateToDoListTitle(id: string, title: string) {\r\n        return instance.put<ResponseType>(`/todo-lists/${id}`, {title})\r\n    }\r\n}\r\n\r\nexport const tasksAPI = {\r\n    getTasks(todolistId:string) {\r\n        return instance.get<GetTasksType>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createNewTask(todolistId:string, title:string) {\r\n        return instance.post<ResponseType<{item:TaskType}>>(`/todo-lists/${todolistId}/tasks/`, {title})\r\n    },\r\n    deleteTask(todolistId:string, taskId:string) {\r\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTaskTitle(todolistId:string, taskId:string, model:UpdateTaskType) {\r\n        return instance.put<ResponseType<{item:TaskType}>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model )\r\n    }\r\n}\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport PlusOneIcon from '@material-ui/icons/PlusOne';\r\nimport {RequestStatusType} from \"../state/app-reducer\";\r\n\r\nexport type PropsType = {\r\n    addNewItem: (title: string) => void\r\n    entityStatus?:RequestStatusType\r\n}\r\n\r\nexport const AddItemForm = React.memo( (props: PropsType) => {\r\n    // console.log('AddItemForm')\r\n    const addItem = () => {\r\n        if (inputValue) {\r\n            props.addNewItem(inputValue.trim())\r\n        } else {\r\n            setError('Error, filed is required')\r\n        }\r\n        setInputValue('')\r\n    }\r\n    const changeInputValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(e.target.value)\r\n        if(error){\r\n            setError('')\r\n        }\r\n    }\r\n    const [inputValue, setInputValue] = useState('')\r\n    const [error, setError] = useState('')\r\n    return <div>\r\n        <TextField variant={'standard'} label={'Title'} error={!!error}\r\n                   onChange={changeInputValue}\r\n                   onBlur={() => {setError('')}}\r\n                   onKeyPress={(e) => {\r\n                       if (e.key === 'Enter') {\r\n                           addItem()\r\n                       }\r\n                   }}\r\n                   value={inputValue}\r\n                   disabled={props.entityStatus === 'loading'}\r\n        />\r\n        <IconButton color={'primary'} onClick={addItem}><PlusOneIcon color={\"primary\"}/></IconButton>\r\n        <div>\r\n            <span className={'error'}>{error}</span>\r\n        </div>\r\n\r\n    </div>\r\n})\r\n","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null,\r\n    isInitialized:false\r\n}\r\n\r\nexport type InitialStateType = {\r\n    status: RequestStatusType,\r\n    error: string | null\r\n    isInitialized:boolean\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: StatusActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case \"APP/SET-ERROR\":\r\n            return {...state, error: action.error}\r\n        case \"APP/SET_INITIALIZED\":\r\n            return {...state, isInitialized: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type StatusActionsType = ReturnType<typeof appSetStatus>\r\n    | ReturnType<typeof appSetError>\r\n    | ReturnType<typeof setIsInitialized>\r\n\r\nexport const appSetStatus = (status: RequestStatusType) => {\r\n    return {type: 'APP/SET-STATUS', status} as const\r\n}\r\nexport const appSetError = (error: string | null) => {\r\n    return {type: 'APP/SET-ERROR', error} as const\r\n}\r\nexport const setIsInitialized = (value:boolean) => {\r\n    return {type:'APP/SET_INITIALIZED', value} as const\r\n}\r\n","import {ResponseType} from \"../api/toDoLists-api\";\r\nimport {appSetError, appSetStatus} from \"../state/app-reducer\";\r\nimport {AppActionsType, StateType} from \"../state/store\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch:ThunkDispatch<StateType, unknown, AppActionsType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(appSetError(data.messages[0]))\r\n    } else {\r\n        dispatch(appSetError('Some error occurred'))\r\n    }\r\n    dispatch(appSetStatus('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch:ThunkDispatch<StateType, unknown, AppActionsType>) => {\r\n    dispatch(appSetError(error.message))\r\n    dispatch(appSetStatus('failed'))\r\n}\r\n\r\n\r\n","import {todolistsAPI, ToDoListType} from \"../api/toDoLists-api\";\r\nimport {AppThunk} from \"./store\";\r\nimport {appSetStatus, RequestStatusType} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utills/error-utills\";\r\n\r\nexport type ToDoActionsType =\r\n    ReturnType<typeof removeToDoList> |\r\n    ReturnType<typeof addToDoList> |\r\n    ReturnType<typeof changeToDoListItem> |\r\n    ReturnType<typeof changeToDoListFilter> |\r\n    ReturnType<typeof setToDoLists> |\r\n    ReturnType<typeof changeTodolistEntityStatus>\r\nexport type FiltersValueType = \"all\" | \"active\" | \"completed\"\r\nexport type toDoListCombineType = ToDoListType & {\r\n    filter: FiltersValueType\r\n    entityStatus: RequestStatusType\r\n}\r\nconst initialState: Array<toDoListCombineType> = []\r\nexport const toDoListsReducer = (toDoLists: Array<toDoListCombineType> = initialState, action: ToDoActionsType): Array<toDoListCombineType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE_TO_DO_LIST\":\r\n            return toDoLists.filter(t => t.id !== action.toDoListId)\r\n        case \"ADD_TO_DO_LIST\":\r\n            const newToDoList: toDoListCombineType = {...action.toDo, filter: 'all', entityStatus:'idle'}\r\n            return [newToDoList, ...toDoLists]\r\n        case \"CHANGE_TO_DO_LIST_ITEM\":\r\n            return toDoLists.map(t => t.id === action.toDoListId ?\r\n                {...t, title: action.title} : t)\r\n        case \"CHANGE_TO_DO_LIST_FILTER\":\r\n            return toDoLists.map(tl => tl.id === action.toDoListId ?\r\n                {...tl, filter: action.newFilterValue} : tl)\r\n        case \"SET_TO_DO_LISTS\":\r\n            return action.toDoLists.map(t => ({...t, filter: 'all', entityStatus:'idle'}))\r\n        case \"CHANGE_ENTITY_STATUS\":\r\n            return toDoLists.map(tl => tl.id === action.toDoListId ? {...tl, entityStatus: action.status} : tl)\r\n        default:\r\n            return toDoLists\r\n    }\r\n}\r\n\r\nexport const removeToDoList = (toDoListId: string) => {\r\n    return {type: 'REMOVE_TO_DO_LIST', toDoListId} as const\r\n}\r\nexport const addToDoList = (toDo: ToDoListType) => {\r\n    return {type: 'ADD_TO_DO_LIST', toDo} as const\r\n}\r\nexport const changeToDoListItem = (title: string, toDoListId: string) => {\r\n    return {type: 'CHANGE_TO_DO_LIST_ITEM', title, toDoListId} as const\r\n}\r\nexport const changeToDoListFilter = (newFilterValue: FiltersValueType, toDoListId: string) => {\r\n    return {type: 'CHANGE_TO_DO_LIST_FILTER', newFilterValue, toDoListId} as const\r\n}\r\nexport const setToDoLists = (toDoLists: Array<ToDoListType>) => {\r\n    return {type: 'SET_TO_DO_LISTS', toDoLists} as const\r\n}\r\nexport const changeTodolistEntityStatus = (toDoListId:string, status:RequestStatusType) => {\r\n    return {type:'CHANGE_ENTITY_STATUS', toDoListId, status} as const\r\n}\r\nexport const setToDoListsThunk = (): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(appSetStatus('loading'))\r\n        const res = await todolistsAPI.getToDolists()\r\n        dispatch(setToDoLists(res.data))\r\n        dispatch(appSetStatus('idle'))\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n    }\r\n}\r\n\r\nexport const addNewToDoListThunk = (title: string): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(appSetStatus('loading'))\r\n        const res = await todolistsAPI.createNewToDoList(title)\r\n        if(res.data.resultCode === 0){\r\n            dispatch(addToDoList(res.data.data.item))\r\n            dispatch(appSetStatus('succeeded'))\r\n        } else{\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n    }\r\n}\r\n\r\nexport const changeToDoListTitleThunk = (toDoListId: string, title: string): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(appSetStatus('loading'))\r\n        const res = await todolistsAPI.updateToDoListTitle(toDoListId, title)\r\n        if(res.data.resultCode === 0){\r\n            dispatch(changeToDoListItem(title, toDoListId))\r\n            dispatch(appSetStatus('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n        dispatch(appSetStatus('failed'))\r\n\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n    }\r\n}\r\nexport const removeToDoListThunk = (toDoListId: string): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(appSetStatus('loading'))\r\n        dispatch(changeTodolistEntityStatus(toDoListId, \"loading\"))\r\n        await todolistsAPI.deleteToDoList(toDoListId)\r\n        dispatch(removeToDoList(toDoListId))\r\n        dispatch(appSetStatus('succeeded'))\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n    }\r\n}\r\n","import {addToDoList, removeToDoList, setToDoLists} from \"./toDoLists-reducer\";\r\nimport {tasksAPI, TaskType, UpdateTaskType} from \"../api/toDoLists-api\";\r\nimport {AppThunk} from \"./store\";\r\nimport {appSetStatus, RequestStatusType} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utills/error-utills\";\r\n\r\nexport type TasksActionsType = ReturnType<typeof removeTask> |\r\n    ReturnType<typeof addNewTask> |\r\n    ReturnType<typeof removeToDoList> |\r\n    ReturnType<typeof addToDoList> |\r\n    ReturnType<typeof setToDoLists> |\r\n    ReturnType<typeof setTasks> |\r\n    ReturnType<typeof updateTask> |\r\n    ReturnType<typeof changeEntityStatusTask>\r\nexport type TaskStateType = {\r\n    [key: string]: Array<DomainTaskType>\r\n}\r\nconst initialState: TaskStateType = {}\r\nexport type DomainTaskType = TaskType & {\r\n    entityStatus:RequestStatusType\r\n}\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: TasksActionsType): TaskStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE_TASK\":\r\n            state[action.toDoListId] = state[action.toDoListId].filter(t => t.id !== action.id)\r\n            return {\r\n                ...state\r\n            }\r\n        case \"ADD_NEW_TASK\":\r\n            const newTask: DomainTaskType = {...action.task, entityStatus:'idle'}\r\n            return {\r\n                ...state, [action.task.todoListId]: [newTask, ...state[action.task.todoListId]]\r\n            }\r\n        case \"UPDATE_TASK\":\r\n            const updateTasks = state[action.toDoListId]\r\n                .map(t => t.id === action.id ? {...t, ...action.model} : t)\r\n            return {\r\n                ...state,\r\n                [action.toDoListId]: updateTasks\r\n            }\r\n        case \"REMOVE_TO_DO_LIST\":\r\n            delete state[action.toDoListId]\r\n            return {\r\n                ...state\r\n            }\r\n        case \"ADD_TO_DO_LIST\":\r\n            return {\r\n                ...state, [action.toDo.id]: []\r\n            }\r\n        case \"SET_TO_DO_LISTS\":\r\n            const stateCopy = state\r\n            action.toDoLists.forEach(t => {\r\n                stateCopy[t.id] = []\r\n            })\r\n            return stateCopy\r\n        case \"SET_TASK\":\r\n            const tasks:DomainTaskType[] = action.tasks.map(t => ({...t, entityStatus:'idle'}))\r\n            return {\r\n                ...state,\r\n                [action.toDoListId]: [...tasks]\r\n            }\r\n        case \"CHANGE_ENTITY_STATUS\":\r\n            return {\r\n                ...state,\r\n                [action.toDoListId]:[...state[action.toDoListId].map(t => t.id === action.id ? ({...t, entityStatus: action.status }) : t)]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTask = (id: string, toDoListId: string) => {\r\n    return {type: 'REMOVE_TASK', toDoListId, id} as const\r\n}\r\nexport const addNewTask = (task: TaskType) => {\r\n    return {type: 'ADD_NEW_TASK', task} as const\r\n}\r\nexport const updateTask = (id: string, toDoListId: string, model: UpdateModelTaskType) => {\r\n    return {type: 'UPDATE_TASK', id, toDoListId, model} as const\r\n}\r\nexport const setTasks = (tasks: Array<TaskType>, toDoListId: string) => {\r\n    return {type: 'SET_TASK', tasks, toDoListId} as const\r\n}\r\nexport const changeEntityStatusTask = (id: string, toDoListId: string, status:RequestStatusType) => {\r\n    return {type:'CHANGE_ENTITY_STATUS', id, toDoListId, status} as const\r\n}\r\nexport const setTasksThunk = (toDoListId: string): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(appSetStatus('loading'))\r\n        const res = await tasksAPI.getTasks(toDoListId)\r\n        dispatch(setTasks(res.data.items, toDoListId))\r\n        dispatch(appSetStatus('idle'))\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n    }\r\n}\r\nexport type UpdateModelTaskType = {\r\n    title?: string\r\n    description?: string | null\r\n    completed?: boolean\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string | null\r\n    deadline?: string | null\r\n}\r\nexport const updateTaskThunk = (toDoListId: string, id: string, model: UpdateModelTaskType): AppThunk => async (dispatch, getState) => {\r\n    const task = getState().tasks[toDoListId].find(t => t.id === id)\r\n    if (task) {\r\n        const modelTask: UpdateTaskType = {\r\n            ...task,\r\n            ...model\r\n        }\r\n        try {\r\n            dispatch(changeEntityStatusTask(id, toDoListId, 'loading' ))\r\n            dispatch(appSetStatus('loading'))\r\n            const res = await tasksAPI.updateTaskTitle(toDoListId, id, modelTask)\r\n            if(res.data.resultCode === 0){\r\n                dispatch(updateTask(id, toDoListId, model))\r\n                dispatch(appSetStatus('succeeded'))\r\n                dispatch(changeEntityStatusTask(id, toDoListId, 'idle' ))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                dispatch(changeEntityStatusTask(id, toDoListId, 'idle' ))\r\n            }\r\n\r\n        } catch (e) {\r\n            handleServerNetworkError(e, dispatch)\r\n            dispatch(changeEntityStatusTask(id, toDoListId, 'idle' ))\r\n        }\r\n\r\n    }\r\n}\r\nexport const addNewTaskThunk = (title: string, toDoListId: string): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(appSetStatus('loading'))\r\n        const res = await tasksAPI.createNewTask(toDoListId, title)\r\n        if(res.data.resultCode === 0){\r\n            dispatch(addNewTask(res.data.data.item))\r\n            dispatch(appSetStatus('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n    }\r\n\r\n}\r\nexport const removeTaskThunk = (toDoListId: string, id: string): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(changeEntityStatusTask(id, toDoListId, 'loading' ))\r\n        dispatch(appSetStatus('loading'))\r\n        await tasksAPI.deleteTask(toDoListId, id)\r\n        dispatch(removeTask(id, toDoListId))\r\n        dispatch(appSetStatus('idle'))\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n    }\r\n}\r\n","import React, {useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport {RequestStatusType} from \"../state/app-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n    entityStatus?:RequestStatusType\r\n}\r\nexport const EditableSpan = React.memo((props: PropsType) => {\r\n    console.log('EditableSpan')\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const onEditMode = () => {\r\n        if(props.entityStatus !== 'loading'){\r\n            setEditMode(true)\r\n            setTitle(props.title)\r\n        }\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    return editMode ?\r\n        <TextField variant={'standard'} color={'primary'}\r\n                   value={title} onChange={(e) => {\r\n            setTitle(e.currentTarget.value)\r\n        }}\r\n                   autoFocus onBlur={offEditMode} type=\"text\"/> :\r\n        <span onDoubleClick={onEditMode}>{props.title}</span>\r\n})\r\n","import React, {useCallback} from \"react\";\r\nimport {Checkbox} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport HighlightOffTwoToneIcon from \"@material-ui/icons/HighlightOffTwoTone\";\r\nimport {TaskStatuses} from \"../../../api/toDoLists-api\";\r\nimport {DomainTaskType} from \"../../../state/tasks-reducer\";\r\n\r\ntype PropsType = {\r\n    t:DomainTaskType\r\n    getChangeCheckedTask:(id: string, toDoListId: string, status:TaskStatuses) => void\r\n    changeTitle: (title: string, id: string, toDoListId: string) => void\r\n    removeTask: (id: string, toDoListId: string) => void\r\n    id:string\r\n}\r\nexport const Task = React.memo(({t, id, changeTitle, ...props}:PropsType) => {\r\n    const onChangeTaskTitle = useCallback((newTitle:string) => {\r\n        changeTitle(newTitle, id, t.id)\r\n    },[id, changeTitle, t.id])\r\n    return <div style={t.status === TaskStatuses.Completed ? {opacity: '0.5'} : {}} key={t.id}><Checkbox\r\n        disabled={t.entityStatus === \"loading\"} color={'primary'} onClick={() => {\r\n        props.getChangeCheckedTask(t.id, id, t.status === 0 ? 2 : 0)\r\n    }} checked={t.status === TaskStatuses.Completed}/>\r\n        <EditableSpan entityStatus={t.entityStatus} changeTitle={onChangeTaskTitle} title={t.title}/>\r\n        <IconButton disabled={t.entityStatus === \"loading\"} onClick={() => {\r\n            props.removeTask(t.id, id)\r\n        }}><HighlightOffTwoToneIcon color={\"primary\"}/>\r\n        </IconButton>\r\n    </div>\r\n\r\n})\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../components/AddItemForm\";\r\nimport {EditableSpan} from \"../../components/EditableSpan\";\r\nimport {Button, ButtonGroup} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteSweepTwoToneIcon from \"@material-ui/icons/DeleteSweepTwoTone\";\r\nimport {Task} from \"./task/Task\";\r\nimport {TaskStatuses} from \"../../api/toDoLists-api\";\r\nimport {FiltersValueType} from \"../../state/toDoLists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {DomainTaskType, setTasksThunk} from \"../../state/tasks-reducer\";\r\nimport {RequestStatusType} from \"../../state/app-reducer\";\r\n\r\ntype ToDoListType = {\r\n    entityStatus:RequestStatusType\r\n    id: string\r\n    title: string\r\n    tasks: Array<DomainTaskType>\r\n    removeTask: (id: string, toDoListId: string) => void\r\n    changeToDoListFilter: (newFilterValue: FiltersValueType, toDoListId: string) => void\r\n    getChangeCheckedTask: (id: string, toDoListId: string, status:TaskStatuses) => void\r\n    addNewTask: (title: string, toDoListId: string) => void\r\n    todoListFilter: FiltersValueType\r\n    removeToDo: (toDoListId: string) => void\r\n    changeTaskTitle: (title: string, id: string, toDoListId: string) => void\r\n    changeToDoListItem: (title: string, toDoListId: string) => void\r\n}\r\n\r\nexport const ToDoList = React.memo( (\r\n    {id, addNewTask, changeToDoListFilter, changeTaskTitle, entityStatus, ...props}: ToDoListType) => {\r\n    console.log('todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(setTasksThunk(id))\r\n    }, [])\r\n    const toDoListFilter = ():DomainTaskType[] => {\r\n        switch (props.todoListFilter) {\r\n            case \"completed\":\r\n                return props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n            case \"active\":\r\n                return props.tasks.filter(t => t.status === TaskStatuses.New)\r\n            default:\r\n                return props.tasks\r\n        }\r\n    }\r\n    const tasksAfterFilter = toDoListFilter()\r\n    const mapTasksElements = tasksAfterFilter.map(t => {\r\n        return <Task t={t}\r\n                     getChangeCheckedTask={props.getChangeCheckedTask}\r\n                     changeTitle={changeTaskTitle}\r\n                     removeTask={props.removeTask}\r\n                     id={id}\r\n                     key={t.id}\r\n        />\r\n    })\r\n    const addNewItemTask = useCallback((title: string) => {\r\n        addNewTask(title, id)\r\n    },[id, addNewTask])\r\n\r\n    const addNewToDoTitle = (title: string) => {\r\n        props.changeToDoListItem(title, id)\r\n    }\r\n\r\n    const onAllClickHandler = useCallback(() =>\r\n        changeToDoListFilter('all', id),[changeToDoListFilter, id])\r\n    const onActiveClickHandler = useCallback(() =>\r\n        changeToDoListFilter('active', id),[changeToDoListFilter, id])\r\n    const onCompletedClickHandler = useCallback(() =>\r\n        changeToDoListFilter('completed', id),[changeToDoListFilter, id])\r\n\r\n    return <div>\r\n        <h3><EditableSpan entityStatus={entityStatus}  changeTitle={addNewToDoTitle} title={props.title}/> <IconButton\r\n            disabled={entityStatus === 'loading'}\r\n            onClick={() => {\r\n            props.removeToDo(id)\r\n        }}><DeleteSweepTwoToneIcon color={\"primary\"}/></IconButton></h3>\r\n        <AddItemForm entityStatus={entityStatus}  addNewItem={addNewItemTask}/>\r\n        <ul style={{listStyle: 'none'}}>\r\n            {mapTasksElements}\r\n        </ul>\r\n        <div>\r\n            <ButtonGroup size={\"small\"} color={\"primary\"}>\r\n            <Button size={'small'} color={\"primary\"} variant={props.todoListFilter === 'all' ? 'contained' : 'outlined'}\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button size={'small'} color={\"primary\"}\r\n                    variant={props.todoListFilter === 'active' ? 'contained' : 'outlined'}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button size={'small'} color={\"primary\"}\r\n                    variant={props.todoListFilter === 'completed' ? 'contained' : 'outlined'}\r\n                    onClick={onCompletedClickHandler}\r\n            >Completed\r\n            </Button>\r\n            </ButtonGroup>\r\n        </div>\r\n    </div>\r\n})\r\n","import {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../components/AddItemForm\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StateType} from \"../state/store\";\r\nimport {\r\n    addNewToDoListThunk,\r\n    changeToDoListFilter,\r\n    changeToDoListTitleThunk,\r\n    FiltersValueType,\r\n    removeToDoListThunk,\r\n    setToDoListsThunk,\r\n    toDoListCombineType\r\n} from \"../state/toDoLists-reducer\";\r\nimport {addNewTaskThunk, removeTaskThunk, TaskStateType, updateTaskThunk} from \"../state/tasks-reducer\";\r\nimport {TaskStatuses} from \"../api/toDoLists-api\";\r\nimport {ToDoList} from \"./todolist/ToDoList\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const ToDoListsList = () => {\r\n    const isLoggedIn = useSelector<StateType, boolean>(state => state.auth.isLoggedIn)\r\n    let toDoLists = useSelector<StateType, Array<toDoListCombineType>>(state => state.toDoLists)\r\n    let tasks = useSelector<StateType, TaskStateType>(state => state.tasks)\r\n    let dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if(!isLoggedIn){\r\n            return;\r\n        }\r\n        dispatch(setToDoListsThunk())\r\n    }, [])\r\n\r\n    const removedTask = useCallback((id: string, toDoListId: string) => {\r\n        dispatch(removeTaskThunk(toDoListId, id))\r\n\r\n    },[dispatch])\r\n    const getChangedCheckedTask = useCallback((id: string, toDoListId: string, status:TaskStatuses) => {\r\n        dispatch(updateTaskThunk(toDoListId, id, {status}))\r\n\r\n    },[dispatch])\r\n    const addedNewTask = useCallback((title: string, toDoListId: string) => {\r\n        dispatch(addNewTaskThunk(title, toDoListId))\r\n    },[dispatch])\r\n    const changedTaskTitle = useCallback((title: string, id: string, toDoListId: string) => {\r\n        dispatch(updateTaskThunk(id, toDoListId, {title}))\r\n    },[dispatch])\r\n\r\n    const removeToDo = useCallback((toDoListId: string) => {\r\n        dispatch(removeToDoListThunk(toDoListId))\r\n    },[dispatch])\r\n    const AddedToDoList = useCallback((title: string) => {\r\n        dispatch(addNewToDoListThunk(title))\r\n    },[dispatch])\r\n    const changedToDoListItem = useCallback((title: string, toDoListId: string) => {\r\n        dispatch(changeToDoListTitleThunk(toDoListId, title))\r\n    },[dispatch])\r\n    const changedToDoListFilter = useCallback((newFilterValue: FiltersValueType, toDoListId: string) => {\r\n        dispatch(changeToDoListFilter(newFilterValue, toDoListId))\r\n    },[dispatch])\r\n\r\n    const gridStyle = {padding:'20px'}\r\n    if(!isLoggedIn){\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    const toDoListComponent = toDoLists.map(tl => {\r\n        return <Grid item key={tl.id}> <Paper elevation={7} style={gridStyle}><ToDoList\r\n            entityStatus={tl.entityStatus}\r\n            id={tl.id}\r\n            title={tl.title}\r\n            tasks={tasks[tl.id]}\r\n            removeTask={removedTask}\r\n            changeToDoListFilter={changedToDoListFilter}\r\n            getChangeCheckedTask={getChangedCheckedTask}\r\n            addNewTask={addedNewTask}\r\n            todoListFilter={tl.filter}\r\n            removeToDo={removeToDo}\r\n            changeTaskTitle={changedTaskTitle}\r\n            changeToDoListItem={changedToDoListItem}\r\n        />\r\n        </Paper>\r\n        </Grid>\r\n    })\r\n    return <>\r\n        <Grid container style={gridStyle}>\r\n            <AddItemForm addNewItem={AddedToDoList}/>\r\n        </Grid>\r\n        <Grid container spacing={5}>\r\n            {toDoListComponent}\r\n        </Grid>\r\n        </>\r\n}\r\n","import {instance} from \"./toDoLists-api\";\r\nimport {ResponseType} from \"./toDoLists-api\"\r\n\r\nexport type LoginParamsType = {\r\n    email:string\r\n    password:string\r\n    rememberMe:boolean\r\n    captcha?:string\r\n\r\n}\r\nexport const authApi = {\r\n    login(data:LoginParamsType) {\r\n        return instance.post<ResponseType<{userId: number}>>('/auth/login', data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{id:number, email:string, login:string}>>('/auth/me')\r\n    },\r\n    logOut(){\r\n        return instance.delete<ResponseType>('/auth/login')\r\n    }\r\n}\r\n","import {AppThunk} from \"./store\";\r\nimport {authApi, LoginParamsType} from \"../api/login-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utills/error-utills\";\r\nimport {setIsInitialized} from \"./app-reducer\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\nexport type AuthActionsType = ReturnType<typeof setIsLoggedInAC>\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\nexport const loginThunk = (data:LoginParamsType): AppThunk => async (dispatch) => {\r\n    try {\r\n        const res = await authApi.login(data)\r\n        if(res.data.resultCode === 0){\r\n            dispatch(setIsLoggedInAC(true))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n    }\r\n}\r\nexport const initializeMeThunk = ():AppThunk => async (dispatch) => {\r\n    try {\r\n        const res = await authApi.me()\r\n        if(res.data.resultCode === 0){\r\n            dispatch(setIsLoggedInAC(true))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n    }\r\n    dispatch(setIsInitialized(true))\r\n}\r\nexport const logOutThunk = ():AppThunk => async (dispatch) => {\r\n    try {\r\n        const res = await authApi.logOut()\r\n        if(res.data.resultCode === 0){\r\n            dispatch(setIsLoggedInAC(false))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n    }\r\n}\r\n","import {AppBar, Toolbar} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StateType} from \"../state/store\";\r\nimport {logOutThunk} from \"../state/auth-reducer\";\r\n\r\nexport const Header = () => {\r\n    const isLoggedIn = useSelector<StateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    return   <AppBar position=\"static\">\r\n        <Toolbar style={{justifyContent:'space-between'}}>\r\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                <Menu/>\r\n            </IconButton>\r\n            <Typography variant=\"h6\">\r\n                ToDoLists\r\n            </Typography>\r\n            {isLoggedIn &&  <Button\r\n                onClick={() => dispatch(logOutThunk())}\r\n                variant={'outlined'} color=\"inherit\">Log out</Button>}\r\n        </Toolbar>\r\n\r\n    </AppBar>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StateType} from \"../state/store\";\r\nimport {appSetError} from \"../state/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<StateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(appSetError(null))\r\n    }\r\n    const open = error !== null\r\n    return (\r\n        <Snackbar open={open} autoHideDuration={3000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginThunk} from \"../state/auth-reducer\";\r\nimport {StateType} from \"../state/store\";\r\nimport { Redirect } from 'react-router-dom';\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<StateType, boolean>(state => state.auth.isLoggedIn)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginThunk(values))\r\n            formik.resetForm()\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if(!values.password){\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3){\r\n                errors.password = 'password must be more 2 symbols'\r\n            }\r\n            return errors;\r\n        }\r\n    })\r\n    if(isLoggedIn){\r\n       return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}>here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <FormGroup>\r\n                    <TextField\r\n                        label=\"Email\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n                    {formik.errors.email && formik.touched.email ? <div style={{color:\"red\"}}>{formik.errors.email}</div> : null}\r\n                    <TextField\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n                    {formik.errors.password && formik.touched.password ? <div style={{color:\"red\"}}>{formik.errors.password}</div> : null}\r\n                    <FormControlLabel\r\n                        label={'Remember me'}\r\n                        control={<Checkbox\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                        />}\r\n                    />\r\n                    <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                </FormGroup>\r\n            </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {CircularProgress, Container, LinearProgress} from \"@material-ui/core\";\r\nimport {ToDoListsList} from \"../todolistsList/ToDoListsList\";\r\nimport {Header} from \"../components/Header\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StateType} from \"../state/store\";\r\nimport {RequestStatusType} from \"../state/app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackBar\";\r\nimport {Login} from \"../login/login\";\r\nimport {BrowserRouter, Redirect, Route, Switch} from 'react-router-dom';\r\nimport {initializeMeThunk} from \"../state/auth-reducer\";\r\n\r\n\r\nfunction App() {\r\n    const status = useSelector<StateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<StateType, boolean>(state => state.app.isInitialized)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeMeThunk())\r\n    }, [])\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <BrowserRouter>\r\n                <ErrorSnackbar/>\r\n                <Header/>\r\n                {status === 'loading' && <LinearProgress style={{position: 'absolute', width: '1380px'}}/>}\r\n                <Container fixed>\r\n                    <Switch>\r\n                        <Route path={'/login'} render={() => <Login/>}/>\r\n                        <Route exact path={'/'} render={() => <ToDoListsList/>}/>\r\n                        <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                        <Redirect from={'/ToDoList'} to={'/login'}/>\r\n                        <Redirect from={'*'} to={'/404'}/>\r\n                    </Switch>\r\n                </Container>\r\n            </BrowserRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport {ToDoActionsType, toDoListsReducer} from \"./toDoLists-reducer\";\r\nimport {TasksActionsType, tasksReducer} from \"./tasks-reducer\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\nimport {appReducer, StatusActionsType} from \"./app-reducer\";\r\nimport {AuthActionsType, authReducer} from \"./auth-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    toDoLists:toDoListsReducer,\r\n    tasks:tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\nexport type StateType = ReturnType<typeof rootReducer>\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppActionsType = ToDoActionsType | TasksActionsType | StatusActionsType | AuthActionsType\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, StateType, unknown, AppActionsType>\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <App/>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n\r\n\r\n"],"sourceRoot":""}